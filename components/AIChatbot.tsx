import React, { useState, useRef, useEffect } from 'react';
import { useTranslations } from '../hooks/useTranslations';
import { useLanguage } from '../contexts/LanguageContext';
import { helpService, type HelpSection } from '../services/helpService';
import { GoogleGenAI } from '@google/genai';
import { getAllSourcesAsText, searchSourcesByKeyword } from '../services/aiKnowledgeService';
import { aiManagementService } from '../services/aiManagementService';
import { useUserInteraction } from '../contexts/UserInteractionContext';

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  sources?: string[];
}

interface AIChatbotProps {
  isOpen: boolean;
  onClose: () => void;
  helpSections?: HelpSection[];
}

export const AIChatbot: React.FC<AIChatbotProps> = ({ 
  isOpen, 
  onClose, 
  helpSections = [] 
}) => {
  const { t } = useTranslations();
  const { language } = useLanguage();
  const { context } = useUserInteraction();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Get additional knowledge sources from database
  const [additionalSourcesText, setAdditionalSourcesText] = useState<string>('');
  
  // Load knowledge sources on component mount
  useEffect(() => {
    const loadKnowledgeSources = async () => {
      try {
        const sources = await getAllSourcesAsText();
        setAdditionalSourcesText(sources);
      } catch (error) {
        console.error('Error loading knowledge sources:', error);
        setAdditionalSourcesText('');
      }
    };
    
    loadKnowledgeSources();
  }, []);

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input when chatbot opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  // Initialize with context if provided
  useEffect(() => {
    if (context && helpSections.length > 0 && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        type: 'assistant',
        content: t('aiChatWelcome', { context: context.screen }),
        timestamp: new Date(),
        sources: []
      };
      setMessages([welcomeMessage]);
    }
  }, [context, helpSections, messages.length, t]);

  // Prepare context for AI using centralized service
  const prepareContext = async (): Promise<string> => {
    let contextString = '';

    // Add help sections content
    if (helpSections.length > 0) {
      contextString += '## Help Documentation\n\n';
      helpSections.forEach(section => {
        contextString += `### ${section.title}\n`;
        contextString += `Category: ${section.category}\n`;
        contextString += `Keywords: ${section.keywords.join(', ')}\n`;
        contextString += `${section.content}\n\n`;
      });
    }

    // Add additional sources from database
    contextString += '## Additional System Knowledge\n\n';
    contextString += additionalSourcesText;

    // Add current context
    if (context) {
      let contextDetails = `## Current Context\n\nUser is currently on screen: **${context.screen}**\nLast action: **${context.action}**\n\n`;
      
      // Add context-specific guidance
      if (context.screen === 'Anv√§ndarhantering' || context.screen === 'User Management') {
        contextDetails += `**CONTEXT INTERPRETATION:** When the user asks questions like "how to create", "how to add", "how to make", they are most likely asking about creating users, adding users, or user management tasks.\n\n`;
      } else if (context.screen === 'Tr√§ningshantering' || context.screen === 'Training Management') {
        contextDetails += `**CONTEXT INTERPRETATION:** When the user asks questions like "how to create", "how to add", "how to make", they are most likely asking about creating training sessions, adding training sessions, or training management tasks.\n\n`;
      } else if (context.screen === 'Incheckning' || context.screen === 'Attendance') {
        contextDetails += `**CONTEXT INTERPRETATION:** When the user asks questions like "how to create", "how to add", "how to make", they are most likely asking about creating attendance records, adding attendance, or attendance management tasks.\n\n`;
      } else if (context.screen === 'Anm√§lan' || context.screen === 'Public Subscription Page') {
        contextDetails += `**CONTEXT INTERPRETATION:** When the user asks questions like "how to create", "how to add", "how to make", they are most likely asking about creating subscriptions, adding subscriptions, or subscription management tasks.\n\n`;
      }
      
      if (Object.keys(context.data).length > 0) {
        contextDetails += `Current form data:\n\`\`\`json\n${JSON.stringify(context.data, null, 2)}\n\`\`\`\n\n`;
      }
      contextString += contextDetails;
    }

    return contextString;
  };

  // Generate contextual relevance explanation
  const generateContextualRelevance = (userQuestion: string, aiResponse: string): string => {
    if (!context) {
      return language === 'sv' 
        ? 'Detta svar √§r baserat p√• allm√§n systemkunskap och dokumentation.'
        : 'This answer is based on general system knowledge and documentation.';
    }

    const screen = context.screen;
    const action = context.action;
    
    // Generate relevance explanation based on context
    if (language === 'sv') {
      if (screen === 'Anv√§ndarhantering' || screen === 'User Management') {
        return `Detta svar √§r relevant eftersom du f√∂r n√§rvarande arbetar med anv√§ndarhantering (${action}).`;
      } else if (screen === 'Tr√§ningshantering' || screen === 'Training Management') {
        return `Detta svar √§r relevant eftersom du f√∂r n√§rvarande arbetar med tr√§ningshantering (${action}).`;
      } else if (screen === 'Incheckning' || screen === 'Attendance') {
        return `Detta svar √§r relevant eftersom du f√∂r n√§rvarande arbetar med incheckning (${action}).`;
      } else if (screen === 'Anm√§lan' || screen === 'Public Subscription Page') {
        return `Detta svar √§r relevant eftersom du f√∂r n√§rvarande arbetar med tr√§ningsanm√§lningar (${action}).`;
      } else {
        return `Detta svar √§r relevant eftersom du f√∂r n√§rvarande arbetar med ${screen} (${action}).`;
      }
    } else {
      if (screen === 'Anv√§ndarhantering' || screen === 'User Management') {
        return `This answer is relevant because you are currently working with user management (${action}).`;
      } else if (screen === 'Tr√§ningshantering' || screen === 'Training Management') {
        return `This answer is relevant because you are currently working with training management (${action}).`;
      } else if (screen === 'Incheckning' || screen === 'Attendance') {
        return `This answer is relevant because you are currently working with attendance (${action}).`;
      } else if (screen === 'Anm√§lan' || screen === 'Public Subscription Page') {
        return `This answer is relevant because you are currently working with training subscriptions (${action}).`;
      } else {
        return `This answer is relevant because you are currently working with ${screen} (${action}).`;
      }
    }
  };

  // Format message content with basic markdown
  const formatMessageContent = (content: string): string => {
    // Convert markdown italic to HTML
    let formatted = content
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br>');
    
    // Handle external source links - convert [text](URL) to clickable links that open in new tabs
    formatted = formatted.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
      // Check if this is an external source by looking for common external patterns
      const isExternal = url.startsWith('http') && !url.includes(window.location.hostname);
      const target = isExternal ? ' target="_blank" rel="noopener noreferrer"' : '';
      const externalClass = isExternal ? ' class="external-source-link"' : '';
      
      return `<a href="${url}"${target}${externalClass}>${text}</a>`;
    });
    
    return formatted;
  };

  // Send message to AI
  const sendMessage = async (content: string) => {
    if (!content.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);
    setIsTyping(true);

    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      if (!apiKey) {
        throw new Error('Gemini API key not configured');
      }

      const ai = new GoogleGenAI({ apiKey });

      const contextString = await prepareContext();
      console.log('üîç Prepared context:', contextString);
      
      const systemPrompt = `Du √§r en hj√§lpsam AI-assistent f√∂r ett tr√§ningshanteringssystem. Anv√§nd f√∂ljande information f√∂r att svara p√• anv√§ndarens fr√•gor:

${contextString}

VIKTIGA INSTRUKTIONER:
- Svara p√• svenska om anv√§ndaren skriver p√• svenska, annars p√• engelska
- Var hj√§lpsam, v√§nlig och professionell
- ANV√ÑND ALLTID KONTEXTINFORMATIONEN f√∂r att f√∂rst√• vad anv√§ndaren menar
- B√ñRJA ALLTID med att f√∂rklara din tolkning av kontexten innan du ger svaret
- Om anv√§ndaren √§r p√• "Anv√§ndarhantering" och fr√•gar "hur skapar jag" ‚Üí b√∂rja med "Eftersom du √§r p√• anv√§ndarhanteringssidan antar jag att du vill veta hur man skapar en anv√§ndare. L√•t mig hj√§lpa dig:"
- Om anv√§ndaren √§r p√• "Tr√§ningshantering" och fr√•gar "hur skapar jag" ‚Üí b√∂rja med "Eftersom du √§r p√• tr√§ningshanteringssidan antar jag att du vill veta hur man skapar ett tr√§ningspass. L√•t mig hj√§lpa dig:"
- Om anv√§ndaren √§r p√• "Incheckning" och fr√•gar "hur skapar jag" ‚Üí b√∂rja med "Eftersom du √§r p√• incheckningssidan antar jag att du vill veta hur man skapar en incheckning. L√•t mig hj√§lpa dig:"
- Om anv√§ndaren √§r p√• "Anm√§lan" och fr√•gar "hur skapar jag" ‚Üí b√∂rja med "Eftersom du √§r p√• anm√§lningssidan antar jag att du vill veta hur man skapar en anm√§lan. L√•t mig hj√§lpa dig:"

F√ñR ENGELSKA FR√ÖGOR:
- Om anv√§ndaren √§r p√• "User Management" och fr√•gar "how to create" ‚Üí b√∂rja med "Since you're on the User Management page, I assume you want to know how to create a user. Let me help you:"
- Om anv√§ndaren √§r p√• "Training Management" och fr√•gar "how to create" ‚Üí b√∂rja med "Since you're on the Training Management page, I assume you want to know how to create a training session. Let me help you:"
- Om anv√§ndaren √§r p√• "Attendance" och fr√•gar "how to create" ‚Üí b√∂rja med "Since you're on the Attendance page, I assume you want to know how to create an attendance record. Let me help you:"
- Om anv√§ndaren √§r p√• "Public Subscription Page" och fr√•gar "how to create" ‚Üí b√∂rja med "Since you're on the Subscription page, I assume you want to know how to create a subscription. Let me help you:"
- Fr√•ga INTE om f√∂rtydligande om kontexten redan ger tydlig information om vad anv√§ndaren vill g√∂ra

EXEMPEL P√Ö KONTEXTBASERADE SVAR:
- Anv√§ndare p√• "Anv√§ndarhantering" + fr√•ga "hur skapar jag" = "Eftersom du √§r p√• anv√§ndarhanteringssidan antar jag att du vill veta hur man skapar en anv√§ndare. L√•t mig hj√§lpa dig: [svar]"
- Anv√§ndare p√• "Tr√§ningshantering" + fr√•ga "hur l√§gger jag till" = "Eftersom du √§r p√• tr√§ningshanteringssidan antar jag att du vill veta hur man l√§gger till ett tr√§ningspass. L√•t mig hj√§lpa dig: [svar]"
- Anv√§ndare p√• "Incheckning" + fr√•ga "hur g√∂r jag" = "Eftersom du √§r p√• incheckningssidan antar jag att du vill veta hur man g√∂r en incheckning. L√•t mig hj√§lpa dig: [svar]"
- Anv√§ndare p√• "Anm√§lan" + fr√•ga "hur anm√§ler jag" = "Eftersom du √§r p√• anm√§lningssidan antar jag att du vill veta hur man anm√§ler sig. L√•t mig hj√§lpa dig: [svar]"

ENGLISH EXAMPLES:
- User on "User Management" + question "how to create" = "Since you're on the User Management page, I assume you want to know how to create a user. Let me help you: [answer]"
- User on "Training Management" + question "how to add" = "Since you're on the Training Management page, I assume you want to know how to add a training session. Let me help you: [answer]"
- User on "Attendance" + question "how to do" = "Since you're on the Attendance page, I assume you want to know how to create an attendance record. Let me help you: [answer]"
- User on "Public Subscription Page" + question "how to subscribe" = "Since you're on the Subscription page, I assume you want to know how to create a subscription. Let me help you: [answer]"

- Ge praktiska exempel n√§r det √§r l√§mpligt
- Citera relevanta delar av dokumentationen n√§r det hj√§lper
- Om du verkligen inte vet svaret, s√§g det tydligt

VIKTIGT - Interaktiva √•tg√§rder (AI actions):
- Efter ditt svar, om det √§r relevant, l√§gg till en eller flera √•tg√§rdshints p√• separata rader i formatet [action:NAMN nyckel=v√§rde ...]
- St√∂dda √•tg√§rder:
  - navigate view=public|admin|attendance|users|trainings|tour-management|shoutout-management
  - open_help id=overview|vouchers|user-management|training-management|subscriptions|attendance|troubleshooting
  - start_tour tourId="tour-id" (starta en guidad rundtur)
  - add_user (√∂ppna formul√§ret f√∂r att l√§gga till anv√§ndare)
  - add_training (√∂ppna formul√§ret f√∂r att l√§gga till tr√§ning)
  - create_tour (√∂ppna formul√§ret f√∂r att skapa rundtur)
  - create_shoutout (√∂ppna formul√§ret f√∂r att skapa shoutout)
- N√§r du f√∂rklarar hur man skapar n√•got, l√§gg alltid till en f√∂ljdfr√•ga som "Vill du att jag g√∂r det √•t dig?" (svenska) eller "Do you want me to do this for you?" (engelska)
- Exempel: [action:add_user] eller [action:add_training]

Viktigt: Skriv alltid din naturliga text f√∂rst. L√§gg d√§refter (om relevant) till √•tg√§rdshints p√• egna rader.

Anv√§ndarens fr√•ga: ${content}`;

      // Debug: Log the system prompt
      console.log('üìù System prompt:', systemPrompt);

      const result = await ai.models.generateContent({
        model: "gemini-2.0-flash-exp",
        contents: systemPrompt,
      });

      const text = result.text.trim();
      
      // Debug: Log the AI response
      console.log('ü§ñ AI Response:', text);
      console.log('üîç Looking for action tags in response...');

      // Process AI actions
      const actionRegex = /\[action:([^\]]+)\]/g;
      const actions = [];
      let match;
      while ((match = actionRegex.exec(text)) !== null) {
        const actionString = match[1];
        const [actionType, ...params] = actionString.split(' ');
        const actionData: any = { type: actionType };
        
        // Parse parameters
        params.forEach(param => {
          if (param.includes('=')) {
            const [key, value] = param.split('=');
            actionData[key] = value.replace(/"/g, '');
          }
        });
        
        actions.push(actionData);
      }
      
      console.log('üìã Actions found:', actions);

      // Extract sources from response (simple keyword matching)
      const sources = [];
      const allKeywords = [
        ...helpSections.flatMap(s => s.keywords)
      ];
      
      // Search for sources in additional knowledge
      const relevantSources = searchSourcesByKeyword(text);
      relevantSources.forEach(source => {
        if (!sources.includes(source.name)) {
          sources.push(source.name);
        }
      });
      
      // Also check help sections
      allKeywords.forEach(keyword => {
        if (text.toLowerCase().includes(keyword.toLowerCase())) {
          const source = helpSections.find(s => s.keywords.includes(keyword))?.title;
          if (source && !sources.includes(source)) {
            sources.push(source);
          }
        }
      });

      // Generate contextual relevance explanation
      const relevanceText = generateContextualRelevance(content, text);
      
      // Combine AI response with contextual relevance
      const fullContent = `${text}\n\n*${relevanceText}*`;

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: fullContent,
        timestamp: new Date(),
        sources: sources.length > 0 ? sources : undefined
      };

      setMessages(prev => [...prev, assistantMessage]);
      
      // Execute AI actions
      actions.forEach(action => {
        console.log('üöÄ Executing action:', action);
        const event = new CustomEvent('ai-action', {
          detail: action
        });
        window.dispatchEvent(event);
      });
    } catch (error) {
      console.error('Error sending message to AI:', error);
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: t('aiChatError'),
        timestamp: new Date()
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setIsTyping(false);
    }
  };

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!isLoading && inputValue.trim()) {
      sendMessage(inputValue);
    }
  };

  // Handle Enter key (with Shift+Enter for new line)
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  if (!isOpen) return null;

  return (
    <div key={language} className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <style>
        {`
          .external-source-link {
            color: #059669 !important;
            font-weight: 600;
            text-decoration: underline;
            position: relative;
          }
          .external-source-link:hover {
            color: #047857 !important;
          }
          .external-source-link::after {
            content: " ‚Üó";
            font-size: 0.8em;
            opacity: 0.7;
          }
        `}
      </style>
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-slate-200">
          <div>
            <h2 className="text-2xl font-bold text-slate-900">{t('aiChatTitle')}</h2>
            <p className="text-slate-600">{t('aiChatDescription')}</p>
          </div>
          <button
            onClick={onClose}
            className="text-slate-400 hover:text-slate-600 transition-colors p-2"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-6 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  message.type === 'user'
                    ? 'bg-cyan-500 text-white'
                    : 'bg-slate-100 text-slate-800'
                }`}
              >
                <div 
                  className="whitespace-pre-wrap"
                  dangerouslySetInnerHTML={{ __html: formatMessageContent(message.content) }}
                />
                {message.sources && message.sources.length > 0 && (
                  <div className="mt-2 pt-2 border-t border-slate-200">
                    <p className="text-xs opacity-75">{t('aiChatSourcesTitle')}</p>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {message.sources.map((source, index) => (
                        <span
                          key={index}
                          className="text-xs bg-slate-200 text-slate-700 px-2 py-1 rounded"
                        >
                          {source}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                <div className="text-xs opacity-75 mt-2">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-slate-100 text-slate-800 rounded-2xl px-4 py-3">
                <div className="flex items-center space-x-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm text-slate-500">{t('aiChatTyping')}</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-6 border-t border-slate-200">
          <form onSubmit={handleSubmit} className="flex space-x-4">
            <div className="flex-1 relative">
              <textarea
                ref={inputRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder={t('aiChatPlaceholder')}
                className="w-full px-4 py-3 border border-slate-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent resize-none"
                rows={1}
                style={{ minHeight: '48px', maxHeight: '120px' }}
                disabled={isLoading}
              />
            </div>
            <button
              type="submit"
              disabled={isLoading || !inputValue.trim()}
              className="px-6 py-3 bg-cyan-500 text-white rounded-xl hover:bg-cyan-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              title={`${t('aiHelpContextTitle')}\n- ${t('aiHelpContextScreen')}: ${context.screen}\n- ${t('aiHelpContextAction')}: ${context.action}${Object.keys(context.data).length > 0 ? `\n- Data: ${JSON.stringify(context.data)}` : ''}`}
            >
              {isLoading ? (
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              )}
            </button>
          </form>
          
          <div className="mt-3 text-xs text-slate-500 text-center">
            {t('aiChatFooter')}
          </div>
        </div>
      </div>
    </div>
  );
};
